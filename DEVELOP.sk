function score(p: player):
	wipe {_p}'s sidebar
	set {_uuid.p} to uuid of {_p}
	{score.off::%{_uuid.p}%} is not set
	set {_num} to 9
	if {score.target::%{_uuid.p}%} is not set:
		if all blocks between location of {_p} and location of {_p}'s target is air:
			set {_uuid} to uuid of {_p}'s target
			if {_p}'s target is a player:
				set name of sidebar of {_p} to "&b%{_p}'s target%"
			else:
				set name of sidebar of {_p} to "&c%{name::%{_uuid}%}% "
		else:
			set {_uuid} to uuid of {_p}
			set name of sidebar of {_p} to "&f%{_p}%"
	else:
		if {score.target::%{_uuid.p}%} is alive:
			set {_uuid} to uuid of {score.target::%{_uuid.p}%}
			set name of sidebar of {_p} to "&f%{name::%{_uuid}%}%"
		else:
			set {_uuid} to uuid of {_p}
			set name of sidebar of {_p} to "&f%{_p}%"
			delete {score.target::%{_uuid.p}%}
			send "&7エフェクトボード対象の消滅を確認 対象設定を自動切り替えに変更しました" to {_p}
	loop {etc.effect.%{_uuid}%::*}:
		set {_value::*} to loop-value split at "|"
		set score "%{_value::5}% &7(&f%{time.effect.%{_uuid}%::%{_value::1}%}%&7)" in sidebar of {_p} to {_num}
		remove 1 from {_num}
		set {_have} to 1
	loop {atk.effect.%{_uuid}%::*}:
		set {_value::*} to loop-value split at "|"
		set score "%{_value::5}% &7(&f%{time.effect.%{_uuid}%::%{_value::1}%}%&7)" in sidebar of {_p} to {_num}
		remove 1 from {_num}
		set {_have} to 1
	loop {vic.effect.%{_uuid}%::*}:
		set {_value::*} to loop-value split at "|"
		set score "%{_value::5}% &7(&f%{time.effect.%{_uuid}%::%{_value::1}%}%&7)" in sidebar of {_p} to {_num}
		remove 1 from {_num}
		set {_have} to 1
	if {_have} is not set:
		if {score.target::%{_uuid.p}%} is alive:
			set score "&7no effect" in sidebar of {_p} to {_num}

on heal:
	cancel event
on food bar change:
	cancel event
on explode:
	cancel event

on death:
	clear drops

on pick up:
	if {canpick.%uuid of event-entity%::*} is set:
		if {canpick.%uuid of event-entity%::*} contains player:
			delete {canpick.%uuid of event-entity%::*}
		else:
			cancel event
	else:
		if tag "Thrower" of nbt of event-entity is set:
			if tag "Thrower" of nbt of event-entity is not "##":
				if tag "Thrower" of nbt of event-entity is not "%player%":
					cancel event

on item spawn:
	if tag "Thrower" of nbt of event-entity is set:
		if "%tag ""Thrower"" of nbt of event-entity%" parsed as offline player is sneaking:
			add "{Thrower:""##""}" to nbt of event-entity
	wait 1 ticks
	if {canpick.%uuid of event-entity%::*} is set:
		set {_t} to "%{canpick.%uuid of event-entity%::*}%"
		replace " and " with ", " in {_t}
		set {_t} to " &7for &f%{_t}%"
		set {_for::*} to {canpick.%uuid of event-entity%::*}
	else:
		if tag "Thrower" of nbt of event-entity is not set:
			set {_t} to ""
			set {_for::*} to all players
		else if tag "Thrower" of nbt of event-entity is "##":
			set {_t} to ""
			set {_for::*} to all players
		else:
			set {_t} to " &7for &f%tag ""Thrower"" of nbt of event-entity%"
			set {_for::*} to "%tag ""Thrower"" of nbt of event-entity%" parsed as offline player
	if name of event-item is set:
		Add "{CustomName:""%name of event-item%%{_t}%"",CustomNameVisible:1}" to nbt of event-entity
	else:
		Add "{CustomName:""%event-item%%{_t}%"",CustomNameVisible:1}" to nbt of event-entity
	wait 1 ticks
	make event-entity glow for {_for::*}

on item merge:
	if tag "Thrower" of nbt of event-entity is not tag "Thrower" of nbt of future event-entity:
		cancel event

every 10 ticks:
	loop all players:
		if {cost_stop::%uuid of loop-player%} is not set:
			add floor({cost_add::%uuid of loop-player%} * (10000 + {cost_add_rise::%uuid of loop-player%}) / 20000) to {cost::%uuid of loop-player%}
			set {_cost} to floor({cost::%uuid of loop-player%} / 5000)
			if {_cost} >= 1:
				add 0.5 * {_cost} to food level of loop-player
				remove 5000 * {_cost} from {cost::%uuid of loop-player%}
		if food level of loop-player = 10:
			set {_h.1} to floor({heal::%uuid of loop-player%} * (10000 + {heal_rise::%uuid of loop-player%}) / 10000)
			set {_h.2} to floor({heal_rate::%uuid of loop-player%} * (10000 + {heal_rate_rise::%uuid of loop-player%}) / 10000)
			heal(0, loop-player, loop-player, {_h.1}, {_h.2})
			add 1 to {cost_check::%uuid of loop-player%}
			if {cost_check::%uuid of loop-player%} > 5:
				set loop-player's walk speed to (0.2 * {speed_rise::%uuid of loop-player%})
		else:
			delete {cost_check::%uuid of loop-player%}
		score(loop-player)
		actionbar_hp(loop-player)
	if tps < 19:
		send title "" with subtitle "&e%tps%" to all players for 1 seconds with fadein 2 ticks

function actionbar_hp(p: player):
	set {_uuid} to uuid of {_p}
	{actionbar::%{_uuid}%} is not set
	if ({hp_now::%{_uuid}%} / {hp_max::%{_uuid}%}) > 0.1:
		set {_t.1} to "&f♥&7: &a&l%comma({hp_now::%{_uuid}%})%"
	else:
		set {_t.1} to "&f♥&7: &c&l%comma({hp_now::%{_uuid}%})%"
	if {shield_now::%{_uuid}%} > 0:
		set {_t.2} to " &7+ &e&l%comma({shield_now::%{_uuid}%})%"
	else:
		set {_t.2} to ""
	if {speed_rise::%{_uuid}%} is not 1:
		if {cost_check::%{_uuid}%} < 6:
			if {cost_check::%{_uuid}%} is 1:
				set {_t.3} to " &8| &b■&7■■■■"
			if {cost_check::%{_uuid}%} is 2:
				set {_t.3} to " &8| &b■■&7■■■"
			if {cost_check::%{_uuid}%} is 3:
				set {_t.3} to " &8| &b■■■&7■■"
			if {cost_check::%{_uuid}%} is 4:
				set {_t.3} to " &8| &b■■■■&7■"
			if {cost_check::%{_uuid}%} is 5:
				set {_t.3} to " &8| &b■■■■■"
		else:
			set {_t.3} to ""
	else:
		set {_t.3} to ""
	if {last_target::%{_uuid}%} is alive:
		set {_uuid.t} to uuid of {last_target::%{_uuid}%}
		set {_t.4} to " &8| %{name::%{_uuid.t}%}%&8: %tag ""CustomName"" of nbt of {last_target::%{_uuid}%}%"
	else:
		set {_t.4} to ""
	send action bar "%{_t.1}%%{_t.2}%%{_t.3}%%{_t.4}%" to {_p}

function actionbar(p: player, txt: string, t: number):
	set {_uuid} to uuid of {_p}
	add 1 to {actionbar::%{_uuid}%}
	set {_n} to {actionbar::%{_uuid}%}
	loop {_t} times:
		if {actionbar::%{_uuid}%} is not {_n}:
			stop
		send action bar {_txt} to {_p}
		wait 1 seconds
	if {actionbar::%{_uuid}%} is {_n}:
		delete {actionbar::%{_uuid}%}

command /damage [<number>]:
	permission: skript.admin
	trigger:
		damage(1, player, player, arg-1)

command /heal [<number>]:
	permission: skript.admin
	trigger:
		heal(1, player, player, arg-1, 10000)

command /shield [<number>]:
	permission: skript.admin
	trigger:
		shield(1, player, player, arg-1, 10000)

on join:
	state(player, {level::%uuid of player%})
	set {hp_now::%uuid of player%} to {hp_max::%uuid of player%}
	set join message to ""
	broadcast "&f%player% &a##JOIN"

on quit:
	set quit message to ""
	broadcast "&f%player% &7##QUIT"

command /dragondelete:
	permission: skript.admin
	trigger:
		set {_list::*} to all id names
		stopEffect id {_list::*}

command /nbt [<text>] [<text>]:
	permission: skript.admin
	trigger:
		if arg 1 is set:
			if arg 2 is set:
				add "{%arg-1%:%arg-2%}" to nbt of player's tool
			else:
				set {_tag} to tag arg-1 of nbt of player's tool
				send {_tag} to player
		else:
			send nbt of player's tool to player

command /state [<player>]:
	permission: skript.admin
	trigger:
		state(player, {armor_set::%uuid of player%})

command /check:
	permission: skript.admin
	trigger:
		loop {atk.effect.%uuid of event-entity%::*}:
			set {_value::*} to loop-value split at "|"
			send "%{_value::5}%" to player
		loop {vic.effect.%uuid of event-entity%::*}:
			set {_value::*} to loop-value split at "|"
			send "%{_value::5}%" to player

command /vn [<player>] [<text>] [<text>] [<string>]:
	permission: skript.admin
	trigger:
		if arg-1 or arg-2 or arg-3 or arg-4 is not set:
			send "&6* &7/vn <player> <variable> <set/add/remove> <text/number>" to player
			stop
		set {_before} to {%arg-2%::%uuid of arg-1%}
		set {_n} to arg-4 parsed as number
		if {_n} is set:
			if arg-3 is "set":
				set {%arg-2%::%uuid of arg-1%} to {_n}
			if arg-3 is "add":
				add {_n} to {%arg-2%::%uuid of arg-1%}
			if arg-3 is "remove":
				remove {_n} from {%arg-2%::%uuid of arg-1%}
		else:
			set {%arg-2%::%uuid of arg-1%} to arg-4
		send "&6* &7%{_before}% &7-> &7%{%arg-2%::%uuid of arg-1%}%"

command /vc [<text>] [<offline player>]:
	permission: skript.admin
	trigger:
		if arg-2 is set:
			broadcast "%{%arg-1%::%uuid of arg-2%}%"
		else:
			broadcast "%{%arg-1%::*}%"

every 30 seconds:
	set {_t} to now formatted as "HHmm"
	set {_time::*} to split {_t} at ""
	set {_h1} to {_time::1} parsed as number
	set {_h2} to {_time::2} parsed as number
	set {_m1} to {_time::3} parsed as number
	set {_m2} to {_time::4} parsed as number
	set {_loc1} to location of block at location(981, 84, 1045)
	set {_loc2} to location of block at location(981, 84, 1040)
	set {_loc3} to location of block at location(981, 83, 1033)
	set {_loc4} to location of block at location(981, 83, 1028)
	block_clock({_loc1}, {_h1})
	block_clock({_loc2}, {_h2})
	block_clock({_loc3}, {_m1})
	block_clock({_loc4}, {_m2})

function block_clock(loc: location, n: number):
	set {_x} to x-loc of {_loc}
	set {_y} to y-loc of {_loc}
	set {_z} to z-loc of {_loc}
	if {_n} is 0:
		set block at all blocks within {_loc} and location({_x}, {_y}+8, {_z}-3) to white concrete #ALL
		set block at all blocks within location({_x}, {_y}+1, {_z}-1) and location({_x}, {_y}+7, {_z}-2) to black concrete
	if {_n} is 1:
		set block at all blocks within {_loc} and location({_x}, {_y}+8, {_z}-3) to black concrete #ALL
		set block at all blocks within location({_x}, {_y}, {_z}-3) and location({_x}, {_y}+8, {_z}-3) to white concrete
	if {_n} is 2:
		set block at all blocks within {_loc} and location({_x}, {_y}+8, {_z}-3) to white concrete #ALL
		set block at all blocks within location({_x}, {_y}+1, {_z}-1) and location({_x}, {_y}+7, {_z}-2) to black concrete
		set block at all blocks within location({_x}, {_y}+4, {_z}-1) and location({_x}, {_y}+4, {_z}-2) to white concrete
		set block at all blocks within location({_x}, {_y}+5, {_z}) and location({_x}, {_y}+7, {_z}) to black concrete
		set block at all blocks within location({_x}, {_y}+1, {_z}-3) and location({_x}, {_y}+3, {_z}-3) to black concrete
	if {_n} is 3:
		set block at all blocks within {_loc} and location({_x}, {_y}+8, {_z}-3) to white concrete #ALL
		set block at all blocks within location({_x}, {_y}+1, {_z}-1) and location({_x}, {_y}+7, {_z}-2) to black concrete
		set block at all blocks within location({_x}, {_y}+4, {_z}-1) and location({_x}, {_y}+4, {_z}-2) to white concrete
		set block at all blocks within location({_x}, {_y}+5, {_z}) and location({_x}, {_y}+7, {_z}) to black concrete
		set block at all blocks within location({_x}, {_y}+1, {_z}) and location({_x}, {_y}+3, {_z}) to black concrete
	if {_n} is 4:
		set block at all blocks within {_loc} and location({_x}, {_y}+8, {_z}-3) to white concrete #ALL
		set block at all blocks within location({_x}, {_y}+1, {_z}-1) and location({_x}, {_y}+7, {_z}-2) to black concrete
		set block at all blocks within location({_x}, {_y}+4, {_z}-1) and location({_x}, {_y}+4, {_z}-2) to white concrete
		set block at all blocks within location({_x}, {_y}+8, {_z}-1) and location({_x}, {_y}+8, {_z}-2) to black concrete
		set block at all blocks within location({_x}, {_y}, {_z}) and location({_x}, {_y}+3, {_z}-2) to black concrete
	if {_n} is 5:
		set block at all blocks within {_loc} and location({_x}, {_y}+8, {_z}-3) to white concrete #ALL
		set block at all blocks within location({_x}, {_y}+1, {_z}-1) and location({_x}, {_y}+7, {_z}-2) to black concrete
		set block at all blocks within location({_x}, {_y}+4, {_z}-1) and location({_x}, {_y}+4, {_z}-2) to white concrete
		set block at all blocks within location({_x}, {_y}+1, {_z}) and location({_x}, {_y}+3, {_z}) to black concrete
		set block at all blocks within location({_x}, {_y}+5, {_z}-3) and location({_x}, {_y}+7, {_z}-3) to black concrete
	if {_n} is 6:
		set block at all blocks within {_loc} and location({_x}, {_y}+8, {_z}-3) to white concrete #ALL
		set block at all blocks within location({_x}, {_y}+1, {_z}-1) and location({_x}, {_y}+7, {_z}-2) to black concrete
		set block at all blocks within location({_x}, {_y}+4, {_z}-1) and location({_x}, {_y}+4, {_z}-2) to white concrete
		set block at all blocks within location({_x}, {_y}+5, {_z}-1) and location({_x}, {_y}+8, {_z}-3) to black concrete
	if {_n} is 7:
		set block at all blocks within {_loc} and location({_x}, {_y}+8, {_z}-3) to white concrete #ALL
		set block at all blocks within location({_x}, {_y}, {_z}) and location({_x}, {_y}+3, {_z}) to black concrete
		set block at all blocks within location({_x}, {_y}, {_z}-1) and location({_x}, {_y}+7, {_z}-2) to black concrete
	if {_n} is 8:
		set block at all blocks within {_loc} and location({_x}, {_y}+8, {_z}-3) to white concrete #ALL
		set block at all blocks within location({_x}, {_y}+1, {_z}-1) and location({_x}, {_y}+7, {_z}-2) to black concrete
		set block at all blocks within location({_x}, {_y}+4, {_z}-1) and location({_x}, {_y}+4, {_z}-2) to white concrete
	if {_n} is 9:
		set block at all blocks within {_loc} and location({_x}, {_y}+8, {_z}-3) to white concrete #ALL
		set block at all blocks within location({_x}, {_y}+1, {_z}-1) and location({_x}, {_y}+7, {_z}-2) to black concrete
		set block at all blocks within location({_x}, {_y}+4, {_z}-1) and location({_x}, {_y}+4, {_z}-2) to white concrete
		set block at all blocks within location({_x}, {_y}, {_z}) and location({_x}, {_y}+3, {_z}-2) to black concrete

command /datadelete:
	permission: skript.admin
	trigger:
		datadelete()

function datadelete(): #不在entityのデータ削除
	set {_list::*} to "actionbar", "rename", "hp_before", "team", "id", "name", "level", "hp_max", "hp_now", "shield_now", "attack_rate", "attack_times", "heal_times", "attack", "stable", "crit_rate", "crit_damage", "diffence_resist", "heal", "attack_resist", "stable_resist", "crit_rate_resist", "crit_damage_resist", "diffence", "heal_rate", "attack_rise", "stable_rise", "crit_rate_rise", "crit_damage_rise", "diffence_resist_rise", "heal_rise", "attack_resist_rise", "stable_resist_rise", "crit_rate_resist_rise", "crit_damage_resist_rise", "diffence_rise", "heal_rate_rise", "projectile.id", "projectile.level", "projectile.star", "projectile.attack_rate", "projectile.attack_times", "projectile.heal_times", "projectile.attack", "projectile.stable", "projectile.crit_rate", "projectile.crit_damage", "projectile.diffence_resist", "projectile.heal", "projectile.attack_rise", "projectile.stable_rise", "projectile.crit_rate_rise", "projectile.crit_damage_rise", "projectile.diffence_resist_rise" and "projectile.heal_rise"
	loop {_list::*}:
		set {_text} to loop-value
		loop {%{_text}%::*}:
			loop-index-2 parsed as entity is not alive
			loop-index-2 parsed as entity is not a player
			delete {%{_text}%::%loop-index-2%}

command /addexp [<offline player>] [<number>]:
	permission: skript.admin
	trigger:
		addexp(arg-1, arg-2)

command /setlevel [<player>] [<number>]:
	permission: skript.admin
	trigger:
		set {level::%uuid of player%} to arg-1
		set {exp::%uuid of player%} to 0
		addexp(player, 0)

function addexp(p: offline player, n: number):
	set {_uuid} to uuid of {_p}
	add {_n} to {exp::%{_uuid}%}
	while {exp::%{_uuid}%} >= {level::%{_uuid}%}*100:
		remove {level::%{_uuid}%}*100 from {exp::%{_uuid}%}
		add 1 to {level::%{_uuid}%}
		add 1 to {_up}
	if {_up} > 0:
		leveluptitle({_p}, {level::%{_uuid}%}-{_up}, {level::%{_uuid}%})
#		present({_p}, item("diamond", 0, 0), 10*{_up})
	set level progress of {_p} to {exp::%{_uuid}%} / ({level::%{_uuid}%} * 100)
	set level of {_p} to {level::%{_uuid}%}
#	state({_p}, {armor_set::%{_uuid}%})
	actionbar_hp({_p})

function leveluptitle(p: player, b: number, a: number):
	set {_uuid} to uuid of {_uuid}
	add {_a} to {leveluptitle.a.%{_uuid}%::*}
	add {_b} to {leveluptitle.b.%{_uuid}%::*}
	while {leveluptitle::%{_uuid}%} is 1:
		wait 10 ticks
		set {leveluptitle.a.%{_uuid}%::*} to sorted {leveluptitle.a.%{_uuid}%::*}
		set {leveluptitle.b.%{_uuid}%::*} to sorted {leveluptitle.b.%{_uuid}%::*}
	loop {leveluptitle.a.%{_uuid}%::*}:
		set {_a} to loop-value
		remove loop-value from {leveluptitle.a.%{_uuid}%::*}
		exit 1 section
	loop {leveluptitle.b.%{_uuid}%::*}:
		set {_b} to loop-value
		remove loop-value from {leveluptitle.b.%{_uuid}%::*}
		exit 1 section
	set {leveluptitle::%{_uuid}%} to 1

	if 1 is 1:
		send "" to {_p}
		send " &fレベルアップ！！  &7%{_b}% &8-> &a&l%{_a}%  &7(%now formatted as ""HH:mm:ss""%&7)" to {_p}
		set {_wait} to 1 ticks
		send title "&7LEVEL UP" with subtitle "&a%{_b}% &7>>>>>>>>> &7%{_a}%" to {_p} for 2 seconds with fadein 0 ticks and fade out 3 ticks
		wait 1 seconds
		send title "&7LEVEL UP" with subtitle "&2%{_b}% &2>&7>>>>>>>> &7%{_a}%" to {_p} for 2 seconds with fadein 0 ticks and fade out 3 ticks
		wait {_wait}
		send title "&7LEVEL UP" with subtitle "&7%{_b}% &a>&2>&7>>>>>>> &7%{_a}%" to {_p} for 2 seconds with fadein 0 ticks and fade out 3 ticks
		wait {_wait}
		send title "&fL&7EVEL UP" with subtitle "&7%{_b}% &2>&a>&2>&7>>>>>> &7%{_a}%" to {_p} for 2 seconds with fadein 0 ticks and fade out 3 ticks
		wait {_wait}
		send title "&fLE&7VEL UP" with subtitle "&7%{_b}% &7>&2>&a>&2>&7>>>>> &7%{_a}%" to {_p} for 2 seconds with fadein 0 ticks and fade out 3 ticks
		wait {_wait}
		send title "&fLEV&7EL UP" with subtitle "&7%{_b}% &7>>&2>&a>&2>&7>>>> &7%{_a}%" to {_p} for 2 seconds with fadein 0 ticks and fade out 3 ticks
		wait {_wait}
		send title "&fLEVE&7L UP" with subtitle "&7%{_b}% &7>>>&2>&a>&2>&7>>> &7%{_a}%" to {_p} for 2 seconds with fadein 0 ticks and fade out 3 ticks
		wait {_wait}
		send title "&fLEVEL&7 UP" with subtitle "&7%{_b}% &7>>>>&2>&a>&2>&7>> &7%{_a}%" to {_p} for 2 seconds with fadein 0 ticks and fade out 3 ticks
		wait {_wait}
		send title "&fLEVEL &7UP" with subtitle "&7%{_b}% &7>>>>>&2>&a>&2>&7> &7%{_a}%" to {_p} for 2 seconds with fadein 0 ticks and fade out 3 ticks
		wait {_wait}
		send title "&fLEVEL U&7P" with subtitle "&7%{_b}% &7>>>>>>&2>&a>&2> &7%{_a}%" to {_p} for 2 seconds with fadein 0 ticks and fade out 3 ticks
		wait {_wait}
		send title "&fLEVEL UP" with subtitle "&7%{_b}% &7>>>>>>>&2>&a> &7%{_a}%" to {_p} for 2 seconds with fadein 0 ticks and fade out 3 ticks
		wait {_wait}
		send title "&fLEVEL UP" with subtitle "&7%{_b}% &7>>>>>>>>&2> &2%{_a}%" to {_p} for 2 seconds with fadein 0 ticks and fade out 3 ticks
		wait {_wait}
		send title "&fLEVEL UP" with subtitle "&7%{_b}% &7>>>>>>>>> &a%{_a}%" to {_p} for 2 seconds with fadein 0 ticks and fade out 3 ticks
		wait 30 ticks
	delete {leveluptitle::%{_uuid}%}

#on right click on enchantment table: #黒板制御パネル用
#	cancel event
#	if location of event-block is location(981.5, 81.5, 1047.5):
#		gui(player, "board")

function effectclear(e: entity):
	set {_uuid} to uuid of {_p}
	delete {atk.effect.%{_uuid}%::*}
	delete {vic.effect.%{_uuid}%::*}
	delete {etc.effect.%{_uuid}%::*}
	delete {time.effect.%{_uuid}%::*}

command /alldeath:
	permission: skript.admin
	trigger:
		alldeath()

on skript stop:
	alldeath()
	datadelete()
	loop all entities:
		loop-entity is alive
		effectclear(loop-entity)

function alldeath():
	loop all entities:
		loop-entity is alive
		loop-entity is not armor stand
		loop-entity is not a player
		death(0, loop-entity, loop-entity)

on right click:
	player is op
	if player's tool is clock:
		if {count} is set:
			delete {count}
		else:
			set {count} to 1
			while 1 is 1:
				if {count} is not set:
					broadcast "&d&l%{count.n}% &7ticks &7(%{count.n}/60%&7 sec)"
					delete {count.n}
					stop
				add 1 to {count.n}
				send action bar "&d&l%{count.n}% &7ticks &7(%{count.n}/60%&7 sec)" to player
				wait 1 ticks
	if player's tool is stick:
		send "%event-block% / %type of event-block% / %nbt of event-block%" to player
	if player's tool is bone:
		toggle event-block
		event-block is black stained glass pane
		add "{east:false,south:false,north:false,west:false}" to nbt of event-block
