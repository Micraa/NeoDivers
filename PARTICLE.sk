function sound(p: player, s: string, v: number, h: number):
	play sound "%{_s}%" with volume {_v} with pitch {_h} to {_p}
function soundloc(p: player, loc: location, s: string, v: number, h: number):
	play sound "%{_s}%" with volume {_v} with pitch {_h} to {_p} at {_loc}

function particle(id: string, num: number, speed: number, x: number, y: number, z: number, loc: location):
	spawn {_num} of "%{_id}%":{_speed} offset by {_x}, {_y}, {_z} at {_loc}
function particle_long(id: string, num: number, speed: number, x: number, y: number, z: number, e: entity, t: number, w: timespan):
	loop {_t} times:
		spawn {_num} of "%{_id}%":{_speed} offset by {_x}, {_y}, {_z} at {_e}
		wait {_w}
function particle_for(id: string, num: number, speed: number, x: number, y: number, z: number, loc: location, for: player):
	spawn {_num} of particle "%{_id}%" for {_for} at {_loc} offset by {_x}, {_y}, {_z} with speed {_speed}

function playParticle(effect: Object, n: number, speed: number, x: number, y: number, z: number, loc: location, for: player):
	set {_particle} to "%{_effect}% with offset by %{_x}%, %{_y}%, %{_z}% and speed %{_speed}%" parsed as a visual effect
	show {_n} ({_particle}) at {_loc} to {_for}

every 15 minutes:
	fountain()

every 10 ticks:
	if {fountain.particle} is not set:
		particle("END_ROD", 1, 0.01, 2.5, 6, 2.5, location(1000.5, 88.5, 1000.5))
		particle("SPELL_INSTANT", 1, 0.01, 2.5, 6, 2.5, location(1000.5, 86, 1000.5))
		particle("FIREWORKS_SPARK", 1, 0.01, 2.5, 6, 2.5, location(1000.5, 86, 1000.5))
	else:
		particle("END_ROD", 1, 0.01, 3, 0.5, 3, location(1000.5, 83, 1000.5))
		particle("SPELL_INSTANT", 1, 0.01, 3, 0.5, 3, location(1000.5, 83, 1000.5))
		particle("FIREWORKS_SPARK", 1, 0.01, 3, 0.5, 3, location(1000.5, 83, 1000.5))

command /pump:
	permission: skript.admin
	trigger:
		fountain()

function fountain():
	pumpholo()
	soundloc(all players, location(1000, 96, 1000), "entity.generic.extinguish_fire", 2, 0.2)
	wait 2 seconds
	soundloc(all players, location(1000, 96, 1000), "entity.generic.extinguish_fire", 2, 0.3)
	wait 2 seconds
	soundloc(all players, location(1000, 96, 1000), "entity.generic.extinguish_fire", 2, 0.2)
	wait 2 seconds
	pumpsound()
	wait 5 seconds
	soundloc(all players, location(1000, 96, 1000), "block.piston.extend", 2, 1.1)
	set block at location(1000, 96, 1000) to blue stained glass block
	pumpprticle()
	wait 7 seconds
	set {fountain.particle} to 1
	wait 4 seconds
	pump("down")
	wait 4 seconds
	soundloc(all players, location(1000, 96, 1000), "entity.generic.extinguish_fire", 2, 0.1)
	wait 3 seconds
	soundloc(all players, location(1000, 96, 1000), "block.piston.extend", 2, 1.1)
	soundloc(all players, location(1000, 96, 1000), "item.bucket.empty", 2, 0.5)
	set block at location(1000, 96, 1000) to air
	wait 3 ticks
	soundloc(all players, location(1000, 96, 1000), "entity.generic.splash", 2, 0.6)
	wait 2 seconds
	soundloc(all players, location(1000, 96, 1000), "entity.generic.splash", 2, 0.6)
	delete {fountain.particle}
	wait 3 seconds
	pump("up")

function pumpholo():
	create holo object "&d騒音&fに&e注意&fしてください" with id "fountain.1" at location(1007.5, 83, 1000.5)
	create holo object "&d騒音&fに&e注意&fしてください" with id "fountain.2" at location(1000.5, 83, 993.5)
	create holo object "&d騒音&fに&e注意&fしてください" with id "fountain.3" at location(993.5, 83, 1000.5)
	create holo object "&d騒音&fに&e注意&fしてください" with id "fountain.4" at location(1000.5, 83, 1007.5)
	loop 9 times:
		if loop-number is 1, 3, 5, 7 or 9:
			pumpholoedit("&7騒音&fに&e注意&fしてください")
		else:
			pumpholoedit("&b噴水&fの&e点検&fを行っています")
		wait 4 seconds
	loop 4 times:
		delete holo object "fountain.%loop-number%"

function pumpholoedit(m: string):
	loop 8 times:
		if loop-number is 1, 3, 5 or 7:
			set {_text} to "&e◆&0◆ %{_m}% &e◆&0◆"
		if loop-number is 2, 4, 6 or 8:
			set {_text} to "&0◆&e◆ %{_m}% &0◆&e◆"
		edit holo object "fountain.1" to "%{_text}%"
		edit holo object "fountain.2" to "%{_text}%"
		edit holo object "fountain.3" to "%{_text}%"
		edit holo object "fountain.4" to "%{_text}%"
		wait 10 ticks

function pumpprticle():
	set {_list::*} to upwards, downwards, south, north, west and east
	loop 280 times:
		particle("WATER_BUBBLE", 100, 1, 3, 1, 3, location(1000.5, 99.5, 1000.5))
		wait 1 ticks
		set {_p::*} to all players in radius 3 around location(1000.5, 97.5, 1000.5)
		push {_p::*} random direction out of {_list::*} at speed 0.5
	set {_p::*} to all players in radius 3 around location(1000.5, 97.5, 1000.5)
	heal(0, all players, {_p::*}, 9999999999, 10000)
	shield(0, all players, {_p::*}, random integer between 1000 and 10000, 10000)

function pumpsound():
	loop 2 times:
		soundloc(all players, location(1000, 96, 1000), "entity.minecart.inside", 2, 0.5)
		wait 3 seconds
		soundloc(all players, location(1000, 96, 1000), "block.brewing_stand.brew", 2, 0.4)
		wait 3 seconds
		soundloc(all players, location(1000, 96, 1000), "block.brewing_stand.brew", 2, 0.4)
		wait 3 seconds
		soundloc(all players, location(1000, 96, 1000), "block.brewing_stand.brew", 2, 0.4)

function pump(m: string):
	if {_m} is "up":
		set {_block} to blue stained glass block
		set {_pane} to blue stained glass pane
		set {_high} to 0.6
	if {_m} is "down":
		set {_block} to white stained glass block
		set {_pane} to white stained glass pane
		set {_high} to 0.3
	soundloc(all players, location(1005, 81, 1000), "entity.shulker.open", 1, {_high})
	soundloc(all players, location(1004, 81, 996), "entity.shulker.open", 1, {_high})
	soundloc(all players, location(1000, 81, 995), "entity.shulker.open", 1, {_high})
	soundloc(all players, location(996, 81, 996), "entity.shulker.open", 1, {_high})
	soundloc(all players, location(995, 81, 1000), "entity.shulker.open", 1, {_high})
	soundloc(all players, location(996, 81, 1004), "entity.shulker.open", 1, {_high})
	soundloc(all players, location(1000, 81, 1005), "entity.shulker.open", 1, {_high})
	soundloc(all players, location(1004, 81, 1004), "entity.shulker.open", 1, {_high})
	loop 16 times:
		if loop-number is 1 or 16:
			set {_set} to {_block}
		else:
			set {_set} to {_pane}
		set {_n} to 80 + loop-number
		set block at location(1005, {_n}, 1000) to {_set}
		set block at location(1004, {_n}, 996) to {_set}
		set block at location(1000, {_n}, 995) to {_set}
		set block at location(996, {_n}, 996) to {_set}
		set block at location(995, {_n}, 1000) to {_set}
		set block at location(996, {_n}, 1004) to {_set}
		set block at location(1000, {_n}, 1005) to {_set}
		set block at location(1004, {_n}, 1004) to {_set}
		wait 1 ticks

every 1 seconds:
	set {_n.1} to random integer between 0.1 and 2
	set {_n.2} to random integer between 0.1 and 2
	soundloc(all players, location(984, 80, 1016), "block.water.ambient", 1, {_n.1})
	soundloc(all players, location(1000, 85, 1000), "block.water.ambient", 1, {_n.1})

every 15 seconds:
	set {_n} to random integer between 3 and 5
	loop {_n} times:
		fountain_circle()
		set {_wait} to random element out of 1 seconds, 2 seconds, 3 seconds, 4 seconds or 5 seconds
		wait {_wait}

function fountain_circle():
	set {_n.1} to random integer between 6 and 8
	set {_n.2} to random integer between 2 and 5
	set {_n.3} to random integer between 0 and 90
	set {_m.4} to random element out of "x" or "z"
	set {_loc::*} to circle(location(1000.5, 85, 1000.5), {_n.1}, {_n.2}, {_n.3}, {_m.4})
	loop {_loc::*}:
		particle("end_rod", 1, 0, 0, 0, 0, loop-value)
		wait 1 ticks

#
on drop:
	event-item is diamond or emerald
	while event-entity is alive:
		if (block at event-entity) is water:
			if block at event-entity is within location(980, 79, 1010) and location(990, 81, 1020):
				make event-entity glow for player
				bind hologram "&7[&f×&f&l%item amount of event-item%&7]" to event-entity for 3 seconds offset by 0, 2.5, 0
				wait 3 seconds
				event-entity is alive
				kill event-entity
				set {_loc.1} to location 0.5 meters above event-entity
				set {_loc.2} to location 1 meters above event-entity
				set {_loc.3} to location 1.5 meters above event-entity
				particle("WATER_BUBBLE", 10, 0, 0.1, 0.1, 0.1, {_loc.1})
				particle("WATER_SPLASH", 10, 0, 0.1, 0.1, 0.1, {_loc.1})
				chance of 50%:
					bind hologram "&f&lSUCCESSED!!" to event-entity for 2 seconds offset by 0, 2.5, 0
					particle("VILLAGER_HAPPY", 10, 0.1, 0.2, 0.2, 0.2, {_loc.2})
					particle("NOTE", 1, 0, 0, 0, 0, {_loc.3})
					set {_n} to 2 * item amount of event-item
					give {_n} of event-item to player
					stop
				bind hologram "&7&lFAILED..." to event-entity for 1 seconds offset by 0, 2.5, 0
				particle("SPELL_INSTANT", 30, 0.1, 0.1, 0.1, 0.1, {_loc.2})
				stop
		wait 1 seconds

#

every 1 minutes:
	soundloc(all players, location(1015, 82, 1027), "entity.generic.extinguish_fire", 0.4, 1.5)
	wait 1 seconds
	soundloc(all players, location(1015, 82, 1027), "block.brewing_stand.brew", 0.4, 1.4)
	wait 20 seconds
	loop 3 times:
		soundloc(all players, location(1015, 82, 1027), "block.stone.place", 0.4, 1.8)
		wait 10 ticks
	wait 1 seconds
	loop 2 times:
		soundloc(all players, location(1015, 82, 1027), "block.waterlily.place", 0.4, 0.5)
		wait 2 seconds
	wait 5 seconds
	soundloc(all players, location(1015, 82, 1027), "block.chest.locked", 0.4, 1.5)
#

function circle(location: location, radius: number, angle: number, rotation: number, n: string) :: locations:
	set {_current} to 0
	if {_n} is "x":
		loop floor(360 / {_angle}) times:
			add {_angle} to {_current}
			set {_l} to {_location}
			add (sin (({_current} / 180) * 3.14159265358979323846)) * {_radius} to x-loc of {_l}
			add (sin ({_rotation} / 180) * 3.14159265358979323846) * ((cos (({_current} / 180) * 3.14159265358979323846)) * {_radius}) to y-loc of {_l}
			add ((cos ({_rotation} / 180) * 3.14159265358979323846) * ((cos (({_current} / 180) * 3.14159265358979323846)) * {_radius})) to z-loc of {_l}
			add {_l} to {_l::*}
	if {_n} is "z":
		loop floor(360 / {_angle}) times:
			add {_angle} to {_current}
			set {_l} to {_location}
			add ((cos ({_rotation} / 180) * 3.14159265358979323846) * ((cos (({_current} / 180) * 3.14159265358979323846)) * {_radius})) to x-loc of {_l}
			add (sin ({_rotation} / 180) * 3.14159265358979323846) * ((cos (({_current} / 180) * 3.14159265358979323846)) * {_radius}) to y-loc of {_l}
			add (sin (({_current} / 180) * 3.14159265358979323846)) * {_radius} to z-loc of {_l}
			add {_l} to {_l::*}
	return {_l::*}
#
